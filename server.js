const express = require('express');
const { createProxyMiddleware } = require('http-proxy-middleware');
const chokidar = require('chokidar');
const WebSocket = require('ws');
const path = require('path');
const fs = require('fs');
const cors = require('cors');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  port: 3000,
  phpServerUrl: 'http://localhost:80', // –ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ PHP —Å–µ—Ä–≤–µ—Ä–∞ (XAMPP/WAMP)
  watchPaths: ['**/*.php', '**/*.js', '**/*.css', '**/*.html'],
  ignorePaths: ['node_modules/**', '.git/**', 'server.js']
};

const app = express();
const server = require('http').createServer(app);
const wss = new WebSocket.Server({ server });

// CORS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.use(cors());

// WebSocket –¥–ª—è live reload
wss.on('connection', (ws) => {
  console.log('üîå Client connected for live reload');
  
  ws.on('close', () => {
    console.log('üîå Client disconnected');
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ reload —Å–∏–≥–Ω–∞–ª–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
function broadcastReload() {
  wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify({ type: 'reload' }));
    }
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ file watcher –¥–ª—è live reload
const watcher = chokidar.watch(config.watchPaths, {
  ignored: config.ignorePaths,
  persistent: true,
  ignoreInitial: true
});

watcher.on('change', (filePath) => {
  console.log(`üìù File changed: ${filePath}`);
  broadcastReload();
});

// –ü—Ä–æ–∫—Å–∏ –¥–ª—è PHP —Ñ–∞–π–ª–æ–≤
const phpProxy = createProxyMiddleware({
  target: config.phpServerUrl,
  changeOrigin: true,
  onError: (err, req, res) => {
    console.error('‚ùå PHP Proxy Error:', err.message);
    res.status(500).send(`
      <h1>PHP Server Error</h1>
      <p>–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PHP —Å–µ—Ä–≤–µ—Ä—É –ø–æ –∞–¥—Ä–µ—Å—É: <strong>${config.phpServerUrl}</strong></p>
      <p>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω XAMPP/WAMP –∏–ª–∏ –¥—Ä—É–≥–æ–π PHP —Å–µ—Ä–≤–µ—Ä</p>
      <hr>
      <p>Error: ${err.message}</p>
    `);
  },
  onProxyReq: (proxyReq, req, res) => {
    console.log(`üîÑ Proxying: ${req.method} ${req.url}`);
  }
});

// Middleware –¥–ª—è PHP —Ñ–∞–π–ª–æ–≤
app.use('*.php', phpProxy);

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (CSS, JS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
app.use(express.static('.', {
  index: false, // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å index.html –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  setHeaders: (res, path) => {
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
  }
}));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ index.php
app.get('/', (req, res) => {
  res.redirect('/index.php');
});

// –ò–Ω–∂–µ–∫—Ç–∏–º live reload —Å–∫—Ä–∏–ø—Ç –≤ HTML –æ—Ç–≤–µ—Ç—ã
app.use((req, res, next) => {
  const originalSend = res.send;
  
  res.send = function(body) {
    if (typeof body === 'string' && body.includes('</body>')) {
      const liveReloadScript = `
        <script>
          (function() {
            const ws = new WebSocket('ws://localhost:${config.port}');
            ws.onmessage = function(event) {
              const data = JSON.parse(event.data);
              if (data.type === 'reload') {
                console.log('üîÑ Live reload triggered');
                window.location.reload();
              }
            };
            ws.onopen = function() {
              console.log('üîå Live reload connected');
            };
            ws.onerror = function(error) {
              console.log('‚ùå Live reload error:', error);
            };
          })();
        </script>
      `;
      body = body.replace('</body>', liveReloadScript + '</body>');
    }
    originalSend.call(this, body);
  };
  
  next();
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(config.port, () => {
  console.log('\nüöÄ CRM Development Server –∑–∞–ø—É—â–µ–Ω!');
  console.log(`üìç URL: http://localhost:${config.port}`);
  console.log(`üîÑ PHP Proxy: ${config.phpServerUrl}`);
  console.log(`üëÄ Watching: ${config.watchPaths.join(', ')}`);
  console.log('\nüí° –°–æ–≤–µ—Ç—ã:');
  console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω XAMPP/WAMP –Ω–∞ –ø–æ—Ä—Ç—É 80');
  console.log('   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑—è—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É');
  console.log('   ‚Ä¢ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n');
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
  watcher.close();
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
}); 